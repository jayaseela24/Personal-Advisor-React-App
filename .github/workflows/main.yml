# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  #push:
    #branches: [ MR-AKS-POC ]
  #pull_request:
    #branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Create dir
        run: mkdir build
      - name: Display structure of downloaded files
        run: ls -la
        working-directory: /home/runner/work/RSI-UI/RSI-UI/
      - name: UI Code Build
        run: |
          npm install
          npm install yarn
          yarn
          CI='' yarn build
      - name: WebUI
        uses: actions/upload-artifact@v2
        with:
          name: Build-Output
          path: build 
  # This workflow contains a single job called "build"
  download_artifact:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: Build-Output
          path: /build
    
      - name: Display structure of downloaded files
        run: ls -la
        working-directory: /home/runner/work/RSI-UI/RSI-UI/
  
  build_image:
    needs: download_artifact
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: 'Login via Azure CLI'       
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SUBSCRIPTION }}
          
      - uses: azure/docker-login@v1
        with:
          login-server: devnextgen.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - run: |
          docker build . -t devnextgen.azurecr.io/rsi/webui:${{ github.sha }}
          docker push devnextgen.azurecr.io/rsi/webui:${{ github.sha }}
      
      - name: ACR Login
        run: |
          az acr login --name ${{ secrets.ACR }}
      
               
      - name: Build and push image to ACR
        id: build-image
        run: | 
            #docker build ./ -t devnextgen.azurecr.io/nodejssampleapp:${{ github.sha }}...
            #docker push devnextgen.azurecr.io/nodejssampleapp:${{ github.sha }}
            docker build ./ -t devnextgen.azurecr.io/rsiweb
            docker push devnextgen.azurecr.io/rsiweb
            
      - uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.aks_rsicedevnxgaks_kubeConfig }}
        id: login
    
      - name: Create namespace
        run: |
            namespacePresent=`kubectl get namespace | grep default | wc -l`
            if [ $namespacePresent -eq 0 ]
            then
              echo `kubectl create namespace default`
            fi
      - uses: azure/k8s-create-secret@v1
        with:
            namespace: default
            container-registry-url: devnextgen.azurecr.io
            container-registry-username: ${{ secrets.acr_devnextgen_username }}
            container-registry-password: ${{ secrets.acr_devnextgen_password }}
            secret-name: rsicedevnxgadockerauth
    
  deploy_dev:
        needs: build_image
        runs-on: ubuntu-latest
        env:
          AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }} # e.g. 'aks_cicd_dev_rg'
          AKS_NAME: ${{ secrets.AKS_NAME }} # e.g. 'akscicddev-aks-b1ce1'
          #AKS_APP_NAMESPACE: ${{ github.event.deployment.environment }}
          ACR_APP_IMAGE: ${{ secrets.ACR }} #/${{ needs.deploy_details.outputs.app_container_image }} # e.g. ACR = 'akscicddevacrb1ce1.azurecr.io'
          #ACR_APP_IMAGE_TAG: ${{ needs.deploy_details.outputs.app_container_version }}
          WORKING-DIECTORY: ./k8s
 
        steps:
          - uses: actions/checkout@master
          - name: Azure Login
            uses: Azure/login@v1
            with:
              creds: ${{ secrets.AZURE_SUBSCRIPTION }}
          - name: AZ AKS Login
            run: az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_NAME }} --overwrite-existing --admin
            shell: bash
          - name: Run kubectl
            run: kubectl apply -f ${{ env.WORKING-DIECTORY }}
            env:
              AZURE_CREDENTIALS: ${{ secrets.AZURE_SUBSCRIPTION }}
